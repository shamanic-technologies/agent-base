/**
 * Create Dashboard Utility
 * 
 * This utility tool is responsible for receiving the configuration for a new dashboard
 * and saving it to the database. It will be used by agents to persist dashboards
 * generated by other services or tools.
 */
import { 
  InternalUtilityTool, 
  ErrorResponse,
  ServiceResponse,
  ExecuteToolResult,
  CreateDashboardRequest,
  DashboardLayout,
  dashboardLayoutSchema,
  Dashboard,
} from '@agent-base/types';
import { registry } from '../../registry/registry.js';
import { createDashboardApiClient } from '@agent-base/api-client';

// --- Local Type Definitions for this Utility ---

export interface CreateDashboardSuccessResponse_Local {
    dashboardId: string;
    name: string;
    message: string;
}

export type CreateDashboardResponse_Local = 
  CreateDashboardSuccessResponse_Local | 
  ErrorResponse;

// --- End Local Type Definitions ---

/**
 * Implementation of the Create Dashboard utility
 */
const createDashboardUtility: InternalUtilityTool = {
  id: 'create_dashboard',
  description: 'Creates and saves a new Tremor dashboard configuration. The agent must generate a valid JSON layout object for the dashboard, starting with a "Grid" block at the root.',
  schema: {
    type: 'object',
    properties: {
      name: {
        type: 'string',
        description: 'REQUIRED. A human-readable name for the dashboard.',
        examples: ['Monthly Recurring Revenue', 'User Churn Analysis']
      },
      layout: {
        type: 'object',
        description: "REQUIRED. A JSON object representing the dashboard layout. It must start with a 'Grid' block at the root. To create a multi-column layout, use the 'props' field with a 'columns' property (e.g., 'props': { 'columns': 2 }). The agent should use other available block-related tools to discover what other blocks and properties are available.",
        examples: [
          {
            "type": "Grid",
            "children": [
              {
                "type": "Text",
                "props": {"variant": "title"},
                "content": "Monthly Revenue Dashboard"
              },
              {
                "type": "Grid",
                "props": { "columns": 2 },
                "children": [
                  {
                    "type": "MetricCard",
                    "title": "Total Revenue",
                    "source": { "value": "$125,432" }
                  },
                  {
                    "type": "MetricCard",
                    "title": "New Customers",
                    "source": { "value": "1,234" }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    required: ['name', 'layout']
  },
  
  execute: async (clientUserId: string, clientOrganizationId: string, platformUserId: string, platformApiKey: string, conversationId: string, params: CreateDashboardRequest): Promise<ServiceResponse<ExecuteToolResult>> => {
    const logPrefix = 'ðŸŽ¨ [CREATE_DASHBOARD]';
    try {
      const { name, layout } = params;

      // Validate input (this is good practice even if the schema does it)
      if (!name || typeof name !== 'string' || !layout || typeof layout !== 'object') {
        console.error(`${logPrefix} Invalid input: name=${name}, layout=${JSON.stringify(layout)}`);
        return { success: false, error: "Name and layout are required." };
      }

      const createResponse: ServiceResponse<Dashboard> = await createDashboardApiClient(
        {
          name,
          layout,
        },
        { clientUserId, clientOrganizationId, platformUserId, platformApiKey }
      );

      // Explicitly check for success before accessing data
      if (!createResponse.success) {
        console.error(`${logPrefix} Failed to create dashboard in database service:`, createResponse.error);
        return createResponse;
      }
      
      return createResponse;
      
    } catch (error: any) {
      console.error(`${logPrefix} Unexpected error:`, error);
      return { 
        success: false, 
        error: "An unexpected error occurred while creating the dashboard.", 
        details: error instanceof Error ? error.message : String(error)
      };
    }
  }
};

// Register the utility
registry.register(createDashboardUtility);

// Export the utility
export default createDashboardUtility; 