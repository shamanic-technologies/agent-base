/**
 * Create Dashboard Utility
 * 
 * This utility tool is responsible for receiving the configuration for a new dashboard
 * and saving it to the database. It will be used by agents to persist dashboards
 * generated by other services or tools.
 */
import { 
  InternalUtilityTool, 
  ErrorResponse,
  ServiceResponse,
  ExecuteToolResult,
  dashboardFileTreeSchema,
  DashboardFileTree,
} from '@agent-base/types';
import { registry } from '../../registry/registry.js';
import { createDashboardApiClient } from '@agent-base/api-client';

// --- Local Type Definitions for this Utility ---

export interface CreateDashboardRequest {
  name: string;
  webContainerConfig: DashboardFileTree;
}

export interface CreateDashboardSuccessResponse_Local {
    dashboardId: string;
    name: string;
    message: string;
}

export type CreateDashboardResponse_Local = 
  CreateDashboardSuccessResponse_Local | 
  ErrorResponse;

// --- End Local Type Definitions ---

/**
 * Implementation of the Create Dashboard utility
 */
const createDashboardUtility: InternalUtilityTool = {
  id: 'utility_create_dashboard',
  description: 'Creates and saves a new dashboard configuration to be used in a web container.',
  schema: {
    type: 'object',
    properties: {
      name: {
        type: 'string',
        description: 'The name of the dashboard.',
        examples: ['Monthly Recurring Revenue', 'User Churn Analysis']
      },
      webContainerConfig: {
        type: 'object',
        description: 'A JSON object representing the file system tree for the web container. This includes package.json, vite.config.ts, and all source files.',
        // In a real scenario, we'd link to a more detailed JSON schema definition here.
      }
    },
    required: ['name', 'webContainerConfig']
  },
  
  execute: async (clientUserId: string, clientOrganizationId: string, platformUserId: string, platformApiKey: string, conversationId: string, params: CreateDashboardRequest): Promise<ServiceResponse<ExecuteToolResult>> => {
    const logPrefix = 'ðŸŽ¨ [CREATE_DASHBOARD]';
    try {
      const { name, webContainerConfig } = params;

      // Validate input (this is good practice even if the schema does it)
      if (!name || typeof name !== 'string' || !webContainerConfig || typeof webContainerConfig !== 'object') {
        return { success: false, error: "Name and webContainerConfig are required." };
      }

      // Validate the webContainerConfig against the shared Zod schema
      const validationResult = dashboardFileTreeSchema.safeParse(webContainerConfig);
      if (!validationResult.success) {
        return { success: false, error: "Invalid webContainerConfig structure.", details: JSON.stringify(validationResult.error.flatten()) };
      }
      
      console.log(`${logPrefix} Calling database service to save dashboard for org "${clientOrganizationId}"`);
      
      const createResponse = await createDashboardApiClient(
        {
          name: name,
          webContainerConfig: validationResult.data,
        },
        { clientUserId, clientOrganizationId, platformUserId, platformApiKey }
      );

      // Explicitly check for success before accessing data
      if (!createResponse.success) {
        console.error(`${logPrefix} Failed to create dashboard in database service:`, createResponse.error);
        return {
            success: false,
            error: "Failed to save the dashboard.",
            details: createResponse.error
        };
      }
      
      // Now TypeScript knows that createResponse.data exists
      const newDashboard = createResponse.data;
      console.log(`${logPrefix} Dashboard saved with ID: ${newDashboard.id}`);
      
      const toolSpecificSuccessData: CreateDashboardSuccessResponse_Local = {
        dashboardId: newDashboard.id,
        name: newDashboard.name,
        message: `Successfully created dashboard "${newDashboard.name}".`
      };
      
      return { success: true, data: toolSpecificSuccessData };
      
    } catch (error: any) {
      console.error(`${logPrefix} Unexpected error:`, error);
      return { 
        success: false, 
        error: "An unexpected error occurred while creating the dashboard.", 
        details: error instanceof Error ? error.message : String(error)
      };
    }
  }
};

// Register the utility
registry.register(createDashboardUtility);

// Export the utility
export default createDashboardUtility; 